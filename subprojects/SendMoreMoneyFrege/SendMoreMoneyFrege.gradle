/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
// frege-lang gradle plugin seems not compatible with recent gradle versions
// * What went wrong:
// 'void org.gradle.api.plugins.JavaBasePlugin.configureForSourceSet(org.gradle.api.tasks.SourceSet, org.gradle.api.tasks.compile.AbstractCompile)'
// comment out for now and do more work here for now (see below)
//    id 'org.frege-lang' version '0.8'
    id 'application'
}

repositories {
    mavenCentral()
}

mainClassName = "SendMoreMoneyBruteForce"

// rest of file borrowed heavily from:
//
ext {
    javaTarget   = 1.8
    // CHANGE NEXT LINE BELOW IF YOU WANT TO USE A DIFFERENT COMPILER
    // define your version and run "gradlew fregeInit" to download
    fregeRelease = '3.25alpha'
    fregeVersion = '3.25.84'
    fregeDir     = "${projectDir}/lib/org/frege-lang/frege/${fregeVersion}"
    fregeJar     = "${fregeDir}/frege-${fregeVersion}.jar"
    fregeMainSourceDir = "${projectDir}/src/main/frege"
    fregeMainJavaDir   = "${buildDir}/src/main/frege"   // where the frege-created *.java files go
}

sourceCompatibility = 1.8
targetCompatibility = javaTarget

/*
task fregeInit {
    group "frege"
    outputs.file(fregeJar)
    doLast {
        // fetch frege distro from github releases and store locally
        ant.mkdir(dir: fregeDir)
        ant.get(src: "https://github.com/Frege/frege/releases/download/${fregeRelease}/frege${fregeVersion}.jar",
                dest: fregeJar,
                skipexisting: 'true')
    }
}
*/

repositories {
    flatDir {
        dirs fregeDir // latest Frege versions not in a maven repo
    }
    //mavenCentral()
    //jcenter()
}

// we manage dependencies as if it was a Java project
dependencies {
    implementation "org.frege-lang:frege:${fregeVersion}"    // disable when running fregeInit
    // additional dependencies go here
}

task prepareCompileDirs { // prepare all the directories that the frege tasks rely upon
    group "frege"
    outputs.dir(sourceSets.main.java.outputDir).withPropertyName("compileOutputDir")
    doLast {
        ant.mkdir(dir: sourceSets.main.java.outputDir)
    }
}

task fregeCompile(type: JavaExec) {            // https://docs.gradle.org/6.5/dsl/org.gradle.api.tasks.JavaExec.html
    dependsOn     prepareCompileDirs
    group       = "frege"
    description = "Compile the -Pfrege_file=."
    classpath   = files fregeJar
    args([
            "-d",                                  //  target directory for *.java and *.class files
            sourceSets.main.java.outputDir,
            "-fp",                                 //  frege path: where to find imported frege packages
            sourceSets.main.compileClasspath.asPath,
            "-enc", "UTF-8",                       //  charset for source code files, standard is UTF-8
            "-target", javaTarget,                 //  generate code for java version n.m, also passed to javac
            "-hints",                              //  print more detailed error messages and warnings
//        "-inline",                           //  inline functions where possible
//        "-strict-pats",                      //  check patterns in multi-argument functions strictly from left to right
//        "-explain", "i[-j]"                  //  print some debugging output from type checker for line(s) i (to j).
            //  May help to understand inexplicable type errors better.
//        "-v",                                //  verbose mode on
            "-make",                               //  build outdated or missing imports
            "-sp",                                 //  look for source files in srcpath, default is .
            fregeMainSourceDir,
//        "-j",                                //  do not run the java compiler
            "-ascii",                              //  do not use ‚Üí, ‚áí, ‚àÄ and ‚à∑ when presenting types,
            //  and use ascii characters for java generics variables
//        "-greek",                            //  make greek type variables
//        "-fraktur",                          //  make ùñãùñóùñÜùñêùñôùñöùñó type variables
            "-latin",                              //  make latin type variables
            project.hasProperty("frege_file") ? project.frege_file : fregeMainSourceDir //  set the file-to-compile via a -P option, if not given use "."
    ])
    // println commandLine // for debugging the build
}
// the generated *.java source files sit beside the *.class files. We
// subsequently move them "back" into a java source dir to better play with the
// standard tooling (e.g. the jar task and IDE assumptions).
fregeCompile.doLast {
    ant.move(toDir: fregeMainJavaDir) {
        fileSet(dir: sourceSets.main.java.outputDir) {
            include name:"**/*.java"
        }
    }
}

// you might want to start the repl as
//   gradlew --console=plain --no-daemon fregeRepl
// to see less confusing "build progress" output and have proper arrow key support

task fregeRepl(type: JavaExec) {
    // dependsOn     fregeCompile  // in case we always want to compile before
    group         = "frege"
    description   = "Frege REPL start via: gradlew --console=plain --no-daemon fregeRepl"
    standardInput = System.in                                 // this should run interactively, so we need stdin
    classpath     = files sourceSets.main.java.outputDir, fregeJar // start with all compiled project classes
    main          = "frege.repl.FregeRepl"
}
fregeRepl.doFirst {
    ant.echo "Consider starting via: gradlew --console=plain --no-daemon fregeRepl"
}

task freplStartCommands {
    group         = "frege"
    doLast {
        // remove the class file from output such that it does not shadow the file
        File classFile = new File(''+
                sourceSets.main.java.outputDir +
                project.frege_file.replaceAll(/^.*\/frege/,'') - ".fr" + ".class")
        if (classFile.exists()) {
            classFile.delete()
            println "deleted $classFile"
        }
        println "Copy the following 3 lines into the console: ------------"
        println "./gradlew --console=plain --no-daemon fregeRepl"
        println ":load ${project.frege_file}"
        println ":browse ${project.class_name}"
    }
}

task fregeRun(type: JavaExec) {
    dependsOn     fregeCompile  // in case we always want to compile before running
    group         = "frege"
    description   = "Run -Pclass_name=${project.mainClassName}"
    standardInput = System.in       // this might run interactively, so we need stdin
    classpath     = files sourceSets.main.runtimeClasspath.asPath
    main          = project.hasProperty("class_name") ? project.class_name : project.mainClassName
}

compileJava.dependsOn fregeCompile
